{"version":3,"sources":["components/titles.jsx","components/form.jsx","components/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","onSubmit","this","props","loadWeather","type","name","placeholder","React","Component","Weather","country","city","temperature","humidity","description","error","API_KEY","App","state","undefined","getWeather","_callee","e","api_call","response","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","titles","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc5095e5.chunk.js","sourcesContent":["import React from 'react';\r\nconst Titles = () => (\r\n    <div>\r\n        <h1 className=\"title-container__title\">Weather Scanner </h1>\r\n        <p className=\"title-container__subtitle\"> Helps you find weather conditions in cities...  </p>\r\n    </div>\r\n);\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render () {\r\n        return (\r\n            <form onSubmit={this.props.loadWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n        <div className=\"weather-info\">\r\n            {props.country && props.city && <p className=\"weather__key\">Location: <span className=\"weather__value\">{props.city}, {props.country}</span></p>}\r\n            {props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{props.temperature}</span></p>}\r\n            {props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{props.humidity}</span></p>}\r\n            {props.description && <p className=\"weather__key\">Conditions:  <span className=\"weather__value\">{props.description}</span></p>}\r\n            {props.error && <p className=\"weather__error\">{props.error}</p>}\r\n        </div>\r\n    )\r\n};\r\nexport default Weather;","import React from 'react';\r\nimport Titles from './components/titles';\r\nimport Form from './components/form';\r\nimport Weather from './components/weather';\r\nimport './App.css';\r\n\r\nconst API_KEY = \"8e9c82ba88c9e256eb528ab67ca3e5d6\";\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    };\r\n\r\n    getWeather = async (e) => {\r\n\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        const country = e.target.elements.country.value;\r\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${API_KEY}`);\r\n        const response = await api_call.json();\r\n\r\n        if (city && country) {\r\n\r\n            this.setState({\r\n                temperature: response.main.temp,\r\n                city: response.name,\r\n                country: response.sys.country,\r\n                humidity: response.main.humidity,\r\n                description: response.weather[0].description,\r\n                error: \"\"\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: \"Please enter the values...\"\r\n            })\r\n        }\r\n    };\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"main\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-xs-12 col-sm-5 title-container \">\r\n                                    <Titles />\r\n                                </div>\r\n                                <div className=\"col-xs-12 col-sm-7 form-container\">\r\n                                    <Form loadWeather={this.getWeather} />\r\n                                    <Weather\r\n                                        temperature={this.state.temperature}\r\n                                        city={this.state.city}\r\n                                        country={this.state.country}\r\n                                        humidity={this.state.humidity}\r\n                                        description={this.state.description}\r\n                                        error={this.state.error}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}